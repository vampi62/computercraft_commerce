global_systeme_version = "0.3"
global_systeme_nom = "client"
global_new_version = {}
global_createur = "vampi62"
global_repo_git = "https://github.com/vampi62/computercraft_commerce"


-- chargement des variables --
if not fs.isDir("config") then
	fs.makeDir("config")
end
global_config_http = "config/.config"
global_config_session = "config/.session"
global_config_panier = "config/.panier"
global_config_mdp_local = "config/.mdpsha"
shell.run("initvar.lua")

local list = fs.list("config/")
for j = 1, #list do
	shell.run("config/"..list[j])
end

global_local_config = {resync_time=5,delay_seconde=5}

global_min_y_page = 5
global_max_y_page = 15

global_http_error_message = {message_error = {
    [0]="succes - pas de retour attendu",
    [1]="succes - commande realiser",
    [10]="erreur - privilege insufisant",
    [11]="erreur - login incorrect",
    [12]="erreur - login admin incorrect",
    [13]="erreur - parametre manquant",
    [20]="erreur - utilisateur existant",
    [21]="erreur - mot de passe non identique",
    [22]="erreur - mail invalide",
    [23]="erreur - mot ne respecte pas les regles de securite",
    [30]="erreur - pas de stock",
    [31]="erreur - quantite inferieur ou egal a 0",
    [32]="erreur - cette offre est a vous",
    [33]="erreur - offre inactive ou invalide",
    [34]="erreur - pas d adresse de livraison",
    [40]="erreur - edition statut invalide",
    [41]="erreur - solde insufisant",
    [42]="erreur - limite offre atteint",
    [51]="erreur - offre ne vous apartient pas",
    [52]="erreur - le prix est incorrect",
    [53]="erreur - le stock est incorrect",
    [60]="succes - pas de transaction",
    [61]="erreur - jeton inferieur a 0",
    [70]="erreur - nom adresse inexistant",
    [71]="erreur - nom adresse deja utiliser",
    [72]="erreur - nom adresse utiliser pour le commerce",
    [73]="erreur - nom adresse utiliser pour la reception",
    [74]="erreur - changement type adresse impossible en cours d utilisation",
    [75]="erreur - suppression adresse impossible en cours d utilisation"
}}
global_local_error_message = {
	[1]="erreur - les deux mot de passe ne correspondent pas",
	[2]="erreur - un champ est vide",
	[3]="erreur - mot de passe incorrect",
	[4]="erreur - le serveur http ne fonctionne pas",
	[5]="erreur - pas de reponse du serveur http",
	[10]="succes - mot de passe bon",
	[11]="succes - mot de passe sauvegarder",
	[12]="succes - config fonctionnel",
	[20]="erreur - une erreur est survenue dans la nouvelle config",
	[21]="erreur - la connexion au serveur ne fonctionne pas dans cette config"
}

--[[
variable init par les fichiers config

global_url = '__ip__or__domain__'
global_port = '80'
global_api_uri = 'api_computercraft'
global_lua_uri = 'lua'
global_systeme_nom = 'client'

global_session = {} -- {pseudo='', mdp='', compte=0, email='', defautadresse={nom='',type='',coo='',description=''}, nbr_offre=0, role='', last_login=''}

global_panier = {} -- {{id_offre=0,quant=0,nom=""},{id_offre=0,quant=0,nom=""}}

global_login_pc = () mdp hash256
]]--

-- init table d'echange entre les programmes --
-- receive_rednet
global_rednet_message_id = 0
global_rednet_message_string = ""
global_rednet_message_table = {}

-- touch
global_value_touch = {}

-- click
global_value_click = {}

-- scroll
global_limite_scroll_haut = false
global_limite_scroll_bas = false
global_scroll = 0

-- ntp
global_ntp = {seconde = 0,min = 0,hour = 0,day = 1,month = 1,year = 1974,sync = 5}

-- clavier
global_maint_clavier = ""
global_clavier = ""

-- affichage_term
global_refresh_term = false
global_term_objet_select = {} -- {{back_color=0,ymin=0,ymax=0,xmin=0,xmax=0,value={action="",id=0,value=0}},{back_color=0,ymin=0,ymax=0,xmin=0,xmax=0,name="",value={action="",id=0,value=0}}}
global_term_objet_write = {} -- {{back_color=0,text_color=0,ymin=0,ymax=0,xmin=0,xmax=0,text=""},{back_color=0,text_color=0,ymin=0,ymax=0,xmin=0,xmax=0,text=""}}

-- affichage_mon
global_monitor_objet_select = {} -- {side_monitor1={back_color=0,ymin=0,ymax=0,xmin=0,xmax=0,value={action="",id=0,value=0}},side_monitor2={back_color=0,ymin=0,ymax=0,xmin=0,xmax=0,value={action="",id=0,value=0}}}
global_monitor_objet_write = {} -- {side_monitor1={back_color=0,text_color=0,ymin=0,ymax=0,xmin=0,xmax=0,text=""},side_monitor2={back_color=0,text_color=0,ymin=0,ymax=0,xmin=0,xmax=0,text=""}}

global_monitor_list = {} -- {side_monitor1=1,side_monitor2=1} -- remplacer la valeur par la taille du texte sur cette ecran
global_refresh_mon = {} -- {false,false} -- cette table a la meme taille que "global_monitor_list"
global_monitor_api = {} -- {function,function} -- fonction a utiliser pour les moniteurs ex: global_monitor_api[x].write() -- cette table a la meme taille que "global_monitor_list"


global_histo_nav = {}
global_edit_variable = {}
global_clavier_maj = {lock=false,shift=false,altgr=false}
-- position min et max pour la generation du texte des tableaux

global_message = ""
global_compteur_tempo_message_http = 0

global_filtre_offre = {nom="",vendeur = "",type="",livraison="",stock_min="",prix_max="",prix_min=""}
global_filtre_commande = {nom="",vendeur="",client="",statut="",type="",livraison="",date_to_now="",prix_max="",prix_min=""}
global_filtre_transaction = {debiteur="",recepteur="",type="",statut="",date_to_now="",terminal=""}
global_filtre_adresse = {nom="",type="",used=""}


-- chargement des fonctions --
local list = fs.list("fonction/")
for j = 1, #list do
	shell.run("fonction/"..list[j])
end
function reinitbox()
	global_variable = {pseudo="",mdp="",confirm="",email="",codemail="",ancienmdp="",nbroffre="",mdp_len="",confirm_len="",ancienmdp_len=""}
	global_scroll = 0
	global_message = ""
end
reinitbox()
--[[
string = convert_grand_nombre(nombre)

screen_function = duplicate_screen(ecran1, ecran2)

save_file(nom, data)

save_var_file(nom, data, name)

save_table_file(nom, data, name)

string_or_table = load_file(nom)

string = sha256(msg)

string_or_table = http_get(action,api_bool)

bool = imprimante(printer,action,text,x,y,color)

int = get_me_objet(me_controle,fingerprint_objet)

table = get_tank_objet(tank)
]]--


global_page_visible = 0
table.insert(global_histo_nav,global_page_visible)
if global_login_pc ~= nil then
	global_page_visible = 10
	table.insert(global_histo_nav,global_page_visible)
	local http_error_message = http_get("listconfig",true)
	if type(http_error_message) == "table" then
		global_http_error_message = http_error_message
	end
	if global_session["pseudo"] ~= "" and global_session["mdp"] ~= "" then
		id_message_http = http_get("listuserdata&mdp="..global_session["mdp"].."&pseudo="..global_session["pseudo"],true)
		local temp_mdp_init = global_session["mdp"]
		if type(id_message_http) == "table" then
			global_session = id_message_http
			global_session["mdp"] = temp_mdp_init
		else
			global_session = {pseudo='', mdp='', compte=0, email='', defautadresse={nom='',type='',coo='',description=''}, nbr_offre=0, role='', last_login=''}
		end
		save_table_file(global_config_session, textutils.serialize(global_session), "global_session")
		id_message_http = nil
	end
	
	global_new_version = http_get("version",false)
end



--[[
	--page--
-1 = retour dans la pile

0  = setup_login_pc

10 = menu

20 = login
21 = inscription
22 = mdp_oublie
23 = code_mdp_oublie
25 = update_mdp
26 = update_mail
27 = achat_offre

30 = offre
31 = panier
33 = plus_info_offre

50 = commande_client
53 = plus_info_commande
54 = litige_commande

60 = transaction
63 = plus_info_transaction
64 = litige_transaction

90 = adresse
91 = add_adresse
92 = edit_adresse

101 = filtre_offre
102 = filtre_transac
103 = filtre_commande
104 = filtre_adresse

130 = offre_commerce
133 = edit_offre_commerce

150 = commande_commerce
153 = edit_commande_commerce

160 = transaction_commerce
163 = plus_info_transaction_commerce


200 = demande_login_pc
201 = change_login_pc
202 = menu_config
203 = mise_a_jour
204 = infos
]]--
--[[
	--action--
-edit_config
-reboot
-shutdown
-disable_message
-setlocalmdp
-changelocalmdp
-localmdp
-deconnexion
-connexion
-inscription
-mdpoublie
-codemail
-changemdp
-changemail
-achatoffre
]]--
--[[
	--variable--

-pseudo
-mdp
-confirm
-email
-codemail
-ancienmdp
-nbroffre
]]--





-- chargement des programmes --
local list = fs.list("programme/")
for j = 1, #list do
	shell.run("programme/"..list[j])
end

-- run prog --

os.setComputerLabel(global_systeme_nom.."-"..global_systeme_version)

function main()
	if not fs.exists("config/update") then
		--parallel.waitForAny(scroll, click, clavier, affichage_term, ntp, back)
		parallel.waitForAny(scroll, click, clavier, up_clavier, affichage_term, ntp, back)
		sleep(5)
	else
		shell.run("update.lua")
	end
end

while true do
	local etat, error_mes = pcall(main)
	if not etat then
		local file = fs.open('log', 'a')
		file.writeLine(os.day()..':'..os.time()..' '..error_mes)
		file.close()
	end
	sleep(0.2)
end